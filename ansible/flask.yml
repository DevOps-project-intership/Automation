---
- name: Update web servers
  hosts: server
  remote_user: ec2-user
  become: yes

  tasks:
    - name: Execute a local shell command
      ansible.builtin.shell: ls -laR
      delegate_to: localhost
      become: false
    
    - name: write hostname using jinja2
      ansible.builtin.template:
       src: consul/frontend/consul.hcl.j2
       dest: /etc/consul.d/consul.hcl
       
    - name: Ensure Nginx is running and enabled
      ansible.builtin.systemd:
        name: nginx
        state: started
        enabled: true
     
    - name: Deploy http-level cache config
      ansible.builtin.template:
        src: "{{ playbook_dir }}/templates/cache.conf.j2"
        dest: /etc/nginx/conf.d/cache.conf
        mode: "0644"

    - name: Ensure ACL tools are installed (setfacl)
      ansible.builtin.dnf:
        name: acl
        state: present
      become: yes

    - name: Ensure git is installed
      ansible.builtin.dnf:
        name: git
        state: present
        update_cache: yes
      become: yes    
    
    - name: Remove old Flask app directory if it exists
      ansible.builtin.file:
        path: "{{ app_dir }}"
        state: absent
      become: yes

    - name: Checkout Flask app from private repo
      ansible.builtin.git:
        repo: "https://{{ github_token }}@github.com/DevOps-project-intership/BirdWatching-Flask.git"
        version: "main"
        dest: "{{ app_dir }}"
        force: yes
        update: yes
        accept_hostkey: yes
      become: yes

    - name: Fix app directory ownership
      ansible.builtin.file:
        path: "{{ app_dir }}"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        recurse: yes 

    - name: Create virtualenv
      ansible.builtin.command: python3 -m venv {{ app_dir }}/venv
      args:
        creates: "{{ app_dir }}/venv/bin/activate"
      become: yes  

    - name: Install Python deps into venv (as root)
      ansible.builtin.command: "{{ app_dir }}/venv/bin/pip install -r {{ app_dir }}/requirements.txt"
      args:
        chdir: "{{ app_dir }}"

    - name: Fix venv ownership
      ansible.builtin.file:
        path: "{{ app_dir }}/venv"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        recurse: yes          

    - name: Drop .env from template
      ansible.builtin.template:
        src: env.j2
        dest: "{{ app_env_file }}"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: "0600"

    - name: Install systemd unit from template
      ansible.builtin.template:
        src: flask.service.j2
        dest: /etc/systemd/system/flask.service
        mode: "0644"
      notify: Reload systemd

    - name: Run DB tables creation script
      ansible.builtin.command: "{{ app_dir }}/venv/bin/python3 {{ app_dir }}/Birdwatching/create_db_tables.py"
      args:
        chdir: "{{ app_dir }}"
      become_user: "{{ app_user }}" 

    - name: Enable & start Flask service
      ansible.builtin.systemd:
        name: flask
        enabled: true
        state: started

    - name: Deploy Nginx reverse proxy config
      ansible.builtin.template:
        src: flask.conf.j2
        dest: /etc/nginx/conf.d/flask.conf
        mode: "0644"
      notify: Reload nginx

    - name: Ensure consul directories exist
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: "0750"
        owner: consul
        group: consul
      loop:
        - /etc/consul.d
        - /opt/consul

    - name: Drop Consul client config (consul.hcl)
      ansible.builtin.copy:
        dest: /etc/consul.d/consul.hcl
        mode: "0640"
        owner: consul
        group: consul
        content: |
          datacenter = "my-dc-1"

          data_dir = "/opt/consul"

          client_addr = "0.0.0.0"

          ui_config {
            enabled = true
          }

          service {
            name = "frontend" # name of the service, must be the same on frontend VMs
            id   = "frontend-{id}" # must be unique, like name of vm
            port = 80
          }

          server = false

          bind_addr = "[::]" # Listen on all IPv6
          bind_addr = "0.0.0.0" # Listen on all IPv4

          advertise_addr = "ip_addr" # theres have to be private ip of vm
          retry_join = ["consul.service.consul"]
      #notify: Restart consul

    # - name: Ensure consul service is enabled and running
    #   ansible.builtin.systemd:
    #     name: consul
    #     enabled: true
    #     state: started

  handlers:
    - name: Reload nginx
      ansible.builtin.systemd:
        name: nginx
        state: reloaded

    - name: Reload systemd
      ansible.builtin.systemd:
        daemon_reload: true

    # - name: Restart consul
    #   ansible.builtin.systemd:
    #     name: consul
    #     state: restarted
